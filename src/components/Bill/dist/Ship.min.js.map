{"version":3,"sources":["Ship.tsx"],"names":["axios_1","require","react_1","baseUrl_1","sweetalert2_1","Ship","_a","setModal","setModal1","_b","useState","firstName","setFirstName","_c","lastName","setLastName","_d","companyName","setCompanyName","_e","country","setCountry","_f","streetAddress","setStreetAddress","_g","apartment","setApartment","_h","townCity","setTownCity","_j","state","setState","_k","zipCode","setZipCode","_l","phone","setPhone","_m","email","setEmail","id","localStorage","getItem","_o","emailError","setEmailError","_p","firstNameError","setFirstNameError","_q","lastNameError","setLastNameError","_r","setCompanyNameError","_s","countryError","setCountryError","_t","streetAddressError","setStreetAddressError","_u","_v","townCityError","setTownCityError","_w","stateError","setStateError","_x","zipCodeError","setZipCodeError","_y","phoneError","setPhoneError","_z","formError","setFormError","useEffect","get","res","sent","console","log","data","shippingAddress","shippingFirstName","shippingLastName","shippingCompanyName","street","town","shippingphone","shippingEmail","err_1","fetchData","React","createElement","className","onSubmit","e","__awaiter","preventDefault","patch","response","status","fire","title","text","icon","confirmButtonText","confirmButtonColor","error_1","type","value","onChange","newFirstName","target","required","newLastName","newCompanyName","newCountry","placeholder","newStreetAddress","newTownCity","newState","newZipCode","test","formattedPhone","replace","length","newEmail","exports"],"mappings":"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","file":"Ship.min.js","sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst Ship = ({ setModal, setModal1 }: any) => {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [companyName, setCompanyName] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [streetAddress, setStreetAddress] = useState(\"\");\r\n  const [apartment, setApartment] = useState(\"\");\r\n  const [townCity, setTownCity] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n  const [zipCode, setZipCode] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  let id = localStorage.getItem(\"id\");\r\n\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [firstNameError, setFirstNameError] = useState(\"\");\r\n  const [lastNameError, setLastNameError] = useState(\"\");\r\n  const [companyNameError, setCompanyNameError] = useState(\"\");\r\n  const [countryError, setCountryError] = useState(\"\");\r\n  const [streetAddressError, setStreetAddressError] = useState(\"\");\r\n  const [apartmentError, setApartmentError] = useState(\"\");\r\n  const [townCityError, setTownCityError] = useState(\"\");\r\n  const [stateError, setStateError] = useState(\"\");\r\n  const [zipCodeError, setZipCodeError] = useState(\"\");\r\n  const [phoneError, setPhoneError] = useState(\"\");\r\n  const [formError, setFormError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function fetchData() {\r\n    try {\r\n      const res = await axios.get(`${baseUrl}/users/${id}`);\r\n      console.log(res.data);\r\n      const data = res.data;\r\n      setFirstName(data.shippingAddress.shippingFirstName);\r\n      setLastName(data.shippingAddress.shippingLastName);\r\n      setCompanyName(data.shippingAddress.shippingCompanyName);\r\n      setCountry(data.shippingAddress.country);\r\n      setStreetAddress(data.shippingAddress.street);\r\n      setApartment(data.shippingAddress.apartment);\r\n      setTownCity(data.shippingAddress.town);\r\n      setState(data.shippingAddress.state);\r\n      setZipCode(data.shippingAddress.zipCode);\r\n      setPhone(data.shippingAddress.shippingphone);\r\n      setEmail(data.shippingAddress.shippingEmail);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // const handleSave = async () => {\r\n  //     const data = {\r\n\r\n  //         \"shippingAddress\": {\r\n  //            shippingFirstName: firstName,\r\n  //            shippingLastName: lastName,\r\n  //            shippingCompanyName: companyName,\r\n  //             country: country,\r\n  //             street: streetAddress,\r\n  //             apartment: apartment,\r\n  //             town: townCity,\r\n  //             state: state,\r\n  //             zipCode: zipCode,\r\n  //             shippingphone: phone,\r\n  //            shippingEmail: email,\r\n  //         }\r\n  //       };\r\n  //     try {\r\n  //         const response = await axios.patch(`${baseUrl}/users/${id}`, data);\r\n  //         console.log(response.data); // do something with the response data\r\n  //     } catch (error) {\r\n  //         console.log(error); // handle the error\r\n  //     }\r\n  // };\r\n\r\n  const handleEmailChange = (e: any) => {\r\n    const newEmail = e.target.value;\r\n    setEmail(newEmail);\r\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(newEmail)) {\r\n      setEmailError(\"Invalid email format\");\r\n    } else {\r\n      setEmailError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleFirstNameChange = (e: any) => {\r\n    const newFirstName = e.target.value;\r\n    setFirstName(newFirstName);\r\n    if (newFirstName === \"\") {\r\n      setFirstNameError(\"First name cannot be empty\");\r\n    } else {\r\n      setFirstNameError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleLastNameChange = (e: any) => {\r\n    const newLastName = e.target.value;\r\n    setLastName(newLastName);\r\n    if (newLastName === \"\") {\r\n      setLastNameError(\"Last name cannot be empty\");\r\n    } else {\r\n      setLastNameError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleCompanyNameChange = (e: any) => {\r\n    const newCompanyName = e.target.value;\r\n    setCompanyName(newCompanyName);\r\n    if (newCompanyName === \"\") {\r\n      setCompanyNameError(\"Company name cannot be empty\");\r\n    } else {\r\n      setCompanyNameError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleCountryChange = (e: any) => {\r\n    const newCountry = e.target.value;\r\n    setCountry(newCountry);\r\n    if (newCountry === \"\") {\r\n      setCountryError(\"Country cannot be empty\");\r\n    } else {\r\n      setCountryError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleStreetAddressChange = (e: any) => {\r\n    const newStreetAddress = e.target.value;\r\n    setStreetAddress(newStreetAddress);\r\n    if (newStreetAddress === \"\") {\r\n      setStreetAddressError(\"Street address cannot be empty\");\r\n    } else {\r\n      setStreetAddressError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleApartmentChange = (e: any) => {\r\n    const newApartment = e.target.value;\r\n    setApartment(newApartment);\r\n    // No validation logic for apartment, assuming it can be empty\r\n  };\r\n\r\n  const handleTownCityChange = (e: any) => {\r\n    const newTownCity = e.target.value;\r\n    setTownCity(newTownCity);\r\n    if (newTownCity === \"\") {\r\n      setTownCityError(\"Town/city cannot be empty\");\r\n    } else {\r\n      setTownCityError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleStateChange = (e: any) => {\r\n    const newState = e.target.value;\r\n    setState(newState);\r\n    if (newState === \"\") {\r\n      setStateError(\"State cannot be empty\");\r\n    } else {\r\n      setStateError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleZipCodeChange = (e: any) => {\r\n    const newZipCode = e.target.value;\r\n    setZipCode(newZipCode);\r\n    if (!/^[0-9]{5}(?:-[0-9]{4})?$/.test(newZipCode)) {\r\n      setZipCodeError(\"Invalid zip code format\");\r\n    } else {\r\n      setZipCodeError(\"\");\r\n    }\r\n  };\r\n\r\n  const handlePhoneChange = (e: any) => {\r\n    const newPhone = e.target.value;\r\n    const formattedPhone = newPhone.replace(/[^0-9]/g, \"\"); // Remove non-digit characters\r\n\r\n    if (formattedPhone.length <= 9) {\r\n      setPhone(formattedPhone);\r\n      setPhoneError(\"\");\r\n    } else {\r\n      setPhoneError(\"Invalid phone number format\");\r\n    }\r\n  };\r\n\r\n  // form handle submit for example\r\n  const handleSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    // perform form submission or validation here\r\n    if (emailError || phoneError || zipCodeError) {\r\n      setFormError(\"Please fix the errors and try again\");\r\n    } else {\r\n      // perform form submission\r\n      const data = {\r\n        shippingAddress: {\r\n          shippingFirstName: firstName,\r\n          shippingLastName: lastName,\r\n          shippingCompanyName: companyName,\r\n          country: country,\r\n          street: streetAddress,\r\n          apartment: apartment,\r\n          town: townCity,\r\n          state: state,\r\n          zipCode: zipCode,\r\n          shippingphone: phone,\r\n          shippingEmail: email,\r\n        },\r\n      };\r\n      try {\r\n        const response = await axios.patch(`${baseUrl}/users/${id}`, data);\r\n        console.log(response.data); // do something with the response data\r\n        if (response.status == 200) {\r\n          Swal.fire({\r\n            title: \"Success\",\r\n            text: \"Your shipping address has been updated successfully\",\r\n            icon: \"success\",\r\n            confirmButtonText: \"Done\",\r\n            confirmButtonColor: \"#8DC14F\",\r\n          });\r\n          setModal1(false);\r\n          setModal(false);\r\n        }\r\n      } catch (error) {\r\n        console.log(error); // handle the error\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-40 mt-10\">\r\n      <h2 className=\"font-semibold mb-2\">SHIPPING ADDRESS</h2>\r\n      <hr className=\"mb-4\" />\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"text-sm\">First Name *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4 \"\r\n          value={firstName}\r\n          onChange={handleFirstNameChange}\r\n          required\r\n        />\r\n        {firstNameError && <div className=\"text-red-500\">{firstNameError}</div>}\r\n\r\n        <label className=\"text-sm\">Last Name *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={lastName}\r\n          onChange={handleLastNameChange}\r\n          required\r\n        />\r\n        {lastNameError && <div className=\"text-red-500\">{lastNameError}</div>}\r\n\r\n        <label className=\"text-sm\">Company Name (optional)</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={companyName}\r\n          onChange={handleCompanyNameChange}\r\n        />\r\n        {/* {companyNameError && <div className='text-red-500'>{companyNameError}</div>} */}\r\n\r\n        <label className=\"text-sm\">Country / Region *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={country}\r\n          onChange={handleCountryChange}\r\n          required\r\n        />\r\n        {countryError && <div className=\"text-red-500\">{countryError}</div>}\r\n\r\n        <label className=\"text-sm\">Street address *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-2 px-4\"\r\n          placeholder=\"House number and street name\"\r\n          value={streetAddress}\r\n          onChange={handleStreetAddressChange}\r\n          required\r\n        />\r\n        {streetAddressError && (\r\n          <div className=\"text-red-500\">{streetAddressError}</div>\r\n        )}\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          placeholder=\"Apartment, suite, unite, etc. (optional)\"\r\n          value={apartment}\r\n          onChange={(e) => setApartment(e.target.value)}\r\n        />\r\n\r\n        <label className=\"text-sm\">Town / City *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={townCity}\r\n          onChange={handleTownCityChange}\r\n          required\r\n        />\r\n        {townCityError && <div className=\"text-red-500\">{townCityError}</div>}\r\n\r\n        <label className=\"text-sm\">State *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={state}\r\n          onChange={handleStateChange}\r\n          required\r\n        />\r\n        {stateError && <div className=\"text-red-500\">{stateError}</div>}\r\n\r\n        <label className=\"text-sm\">Zip Code *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={zipCode}\r\n          onChange={handleZipCodeChange}\r\n          required\r\n        />\r\n        {zipCodeError && <div className=\"text-red-500\">{zipCodeError}</div>}\r\n\r\n        <label className=\"text-sm\">Phone *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={phone}\r\n          onChange={handlePhoneChange}\r\n          required\r\n        />\r\n        {phoneError && <div className=\"text-red-500\">{phoneError}</div>}\r\n\r\n        <label className=\"text-sm\">Email address *</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full h-10 bg-gray-100 rounded-md mt-2 mb-4 px-4\"\r\n          value={email}\r\n          onChange={handleEmailChange}\r\n          required\r\n        />\r\n        {emailError && <div className=\"text-red-500\">{emailError}</div>}\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-primary text-white py-2.5 px-4 mb-4 rounded-md text-sm\"\r\n          // onClick={handleSave}\r\n        >\r\n          Save Changes\r\n        </button>\r\n        {formError && <div className=\"text-red-500\">{formError}</div>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ship;\r\n"]}