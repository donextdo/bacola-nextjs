{"version":3,"sources":["Brands.tsx"],"names":[],"mappings":"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","file":"Brands.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport CheckBoxRow from \"../CheckBox/CheckBox\";\r\nimport axios from \"axios\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Product } from \"@/features/product/product\";\r\nimport { RootState } from \"@/redux/store\";\r\n\r\nconst Brands = ({ categoryId }: any) => {\r\n  const [brand, setBrand] = useState([]);\r\n  const [isEmpty, setIsEmpty] = useState(false);\r\n  const [checkedBrands, setCheckedBrands] = useState<any>({});\r\n  const [brandPage, setBrandPage] = useState([]);\r\n  const router = useRouter();\r\n\r\n  const products = useSelector(\r\n    (state: RootState) => state.product.products\r\n  ) as Product[];\r\n\r\n  useEffect(() => {\r\n    setCheckedBrands([]);\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`${baseUrl}/products/${categoryId}`);\r\n        setBrand(response.data);\r\n        setIsEmpty(response.data.length === 0);\r\n        setBrandPage(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n    const queryBrands = router.query.brands;\r\n    if (typeof queryBrands === \"string\") {\r\n      const selectedBrands = queryBrands.split(\",\");\r\n      const newCheckedBrands: { [key: string]: boolean } = {};\r\n      selectedBrands.forEach((brandId: any) => {\r\n        newCheckedBrands[brandId] = true;\r\n      });\r\n      setCheckedBrands(newCheckedBrands);\r\n    }\r\n  }, [categoryId]);\r\n\r\n  const handleBrandClick = (brandId: any) => {\r\n    const newCheckedBrands = { ...checkedBrands };\r\n    newCheckedBrands[brandId] = !checkedBrands[brandId];\r\n    setCheckedBrands(newCheckedBrands);\r\n    const selectedBrands = Object.keys(newCheckedBrands).filter(\r\n      (key) => newCheckedBrands[key]\r\n    );\r\n\r\n    router.push({\r\n      pathname: router.pathname,\r\n      query: { ...router.query, brands: selectedBrands.join(\",\") },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {categoryId\r\n        ? !isEmpty && (\r\n            <div className=\"box-border max-h-[106px] max-w-[270px] lg:mt-12\">\r\n              <h4 className=\"max-h-[18px] max-w-[270px] uppercase tracking-[0] font-[600] text-[.9375rem] mb-[1.25rem] font-ff-headings\">\r\n                brands\r\n              </h4>\r\n              {brand.map((category: any, index) => {\r\n                const isChecked = checkedBrands[category._id];\r\n                return (\r\n                  <div\r\n                    className=\"relative max-h-[59px] max-w-[270px] flex items-center hover:cursor-pointer\"\r\n                    key={category._id}\r\n                  >\r\n                    <div className=\"flex flex-row mb-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id={category._id}\r\n                        checked={isChecked}\r\n                        onChange={() => handleBrandClick(category.brand)}\r\n                        className=\"mr-4  min-h-[14px] min-w-[14px] hover:cursor-pointer accent-blue-900 hover:bg-blue-900\"\r\n                      />\r\n                      <label\r\n                        htmlFor={category._id}\r\n                        className={`select-none text-[.8125rem]  font-medium hover:cursor-pointer capitalize ${\r\n                          isChecked ? \"text-blue-900\" : \"text-gray-500\"\r\n                        }`}\r\n                      >\r\n                        {category.brand}\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )\r\n        : !isEmpty && (\r\n            <div className=\"box-border max-h-[106px] max-w-[270px] lg:mt-12\">\r\n              <h4 className=\"max-h-[18px] max-w-[270px] uppercase tracking-[0] font-[600] text-[.9375rem] mb-[1.25rem] font-ff-headings\">\r\n                brands\r\n              </h4>\r\n              {brandPage.map((brand: any, index: any) => {\r\n                const isChecked = checkedBrands[brand.id];\r\n                return (\r\n                  <div\r\n                    className=\"relative max-h-[59px] max-w-[270px] flex items-center hover:cursor-pointer\"\r\n                    key={index}\r\n                  >\r\n                    <div className=\"flex flex-row mb-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id={brand.id}\r\n                        checked={isChecked}\r\n                        // onChange={() => handleBrandClick(brand.id)}\r\n                        className=\"mr-4  min-h-[14px] min-w-[14px] hover:cursor-pointer accent-blue-900 hover:bg-blue-900\"\r\n                      />\r\n                      <label\r\n                        htmlFor={brand.id}\r\n                        className={`select-none text-[.8125rem]  font-medium hover:cursor-pointer capitalize ${\r\n                          isChecked ? \"text-blue-900\" : \"text-gray-500\"\r\n                        }`}\r\n                      >\r\n                        {brand.name}\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Brands;\r\n"]}