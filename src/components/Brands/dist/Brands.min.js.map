{"version":3,"sources":["Brands.tsx"],"names":["react_1","require","axios_1","baseUrl_1","router_1","react_redux_1","Brands","_a","categoryId","_b","useState","brand","setBrand","_c","isEmpty","setIsEmpty","_d","checkedBrands","setCheckedBrands","_e","brandPage","setBrandPage","router","useRouter","useSelector","state","product","products","useEffect","__awaiter","get","response","sent","data","length","console","log","error_1","queryBrands","query","brands","selectedBrands","split","newCheckedBrands_1","forEach","brandId","React","createElement","className","map","category","index","isChecked","_id","key","type","id","checked","onChange","newCheckedBrands","__assign","Object","keys","filter","push","pathname","join","handleBrandClick","htmlFor","name","exports"],"mappings":"2qDAAA,IAAAA,QAAAC,QAAA,SAEAC,QAAAD,QAAA,SACAE,UAAAF,QAAA,0BACAG,SAAAH,QAAA,eACAI,cAAAJ,QAAA,eAIMK,OAAS,SAACC,OAAEC,EAAAD,EAAAC,WACVC,EAAAT,QAAAU,SAAA,IAACC,EAAAF,EAAA,GAAOG,EAAAH,EAAA,GACRI,EAAAb,QAAAU,UAAA,GAACI,EAAAD,EAAA,GAASE,EAAAF,EAAA,GACVG,EAAAhB,QAAAU,SAAA,IAACO,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAChBG,EAAAnB,QAAAU,SAAA,IAACU,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GACZG,EAASlB,SAAAmB,YAEElB,cAAAmB,YACf,SAACC,GAAqB,OAAAA,EAAMC,QAAQC,WAGtC3B,QAAA4B,UAAU,WACRV,EAAiB,IAECW,eAAA,OAAA,OAAA,EAAA,8EAEG,6BAAA,CAAA,EAAM3B,QAAA,QAAM4B,IAAO3B,UAAA,QAAO,aAAaK,kBAAlDuB,EAAWxB,EAAAyB,OACjBpB,EAASmB,EAASE,MAClBlB,EAAoC,IAAzBgB,EAASE,KAAKC,QACzBb,EAAaU,EAASE,qCAEtBE,QAAQC,IAAIC,+BAIhB,IAAMC,EAAchB,EAAOiB,MAAMC,OACjC,GAA2B,iBAAhBF,EAA0B,CACnC,IAAMG,EAAiBH,EAAYI,MAAM,KACnCC,EAA+C,GACrDF,EAAeG,QAAQ,SAACC,GACtBF,EAAiBE,IAAW,IAE9B3B,EAAiByB,KAElB,CAACnC,IAgBJ,OACEsC,MAAAC,cAAA,MAAA,KACGvC,GACIM,GACCgC,MAAAC,cAAA,MAAA,CAAKC,UAAU,mDACbF,MAAAC,cAAA,KAAA,CAAIC,UAAU,8GAA4G,UAGzHrC,EAAMsC,IAAI,SAACC,EAAeC,GACzB,IAAMC,EAAYnC,EAAciC,EAASG,KACzC,OACEP,MAAAC,cAAA,MAAA,CACEC,UAAU,6EACVM,IAAKJ,EAASG,KAEdP,MAAAC,cAAA,MAAA,CAAKC,UAAU,sBACbF,MAAAC,cAAA,QAAA,CACEQ,KAAK,WACLC,GAAIN,EAASG,IACbI,QAASL,EACTM,SAAU,WAAM,OAlCb,SAACb,GACxB,IAAMc,EAAgBC,SAAA,GAAQ3C,GAC9B0C,EAAiBd,IAAY5B,EAAc4B,GAC3C3B,EAAiByC,GACjB,IAAMlB,EAAiBoB,OAAOC,KAAKH,GAAkBI,OACnD,SAACT,GAAQ,OAAAK,EAAiBL,KAG5BhC,EAAO0C,KAAK,CACVC,SAAU3C,EAAO2C,SACjB1B,MAAKqB,SAAAA,SAAA,GAAOtC,EAAOiB,OAAK,CAAEC,OAAQC,EAAeyB,KAAK,SAwBpBC,CAAiBjB,EAASvC,QAC1CqC,UAAU,2FAEZF,MAAAC,cAAA,QAAA,CACEqB,QAASlB,EAASG,IAClBL,UAAW,6EACTI,EAAY,gBAAkB,kBAG/BF,EAASvC,aAQvBG,GACCgC,MAAAC,cAAA,MAAA,CAAKC,UAAU,mDACbF,MAAAC,cAAA,KAAA,CAAIC,UAAU,8GAA4G,UAGzH5B,EAAU6B,IAAI,SAACtC,EAAYwC,GAC1B,IAAMC,EAAYnC,EAAcN,EAAM6C,IACtC,OACEV,MAAAC,cAAA,MAAA,CACEC,UAAU,6EACVM,IAAKH,GAELL,MAAAC,cAAA,MAAA,CAAKC,UAAU,sBACbF,MAAAC,cAAA,QAAA,CACEQ,KAAK,WACLC,GAAI7C,EAAM6C,GACVC,QAASL,EAETJ,UAAU,2FAEZF,MAAAC,cAAA,QAAA,CACEqB,QAASzD,EAAM6C,GACfR,UAAW,6EACTI,EAAY,gBAAkB,kBAG/BzC,EAAM0D,aAY/BC,QAAA,QAAehE","file":"Brands.min.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport CheckBoxRow from \"../CheckBox/CheckBox\";\r\nimport axios from \"axios\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Product } from \"@/features/product/product\";\r\nimport { RootState } from \"@/redux/store\";\r\n\r\nconst Brands = ({ categoryId }: any) => {\r\n  const [brand, setBrand] = useState([]);\r\n  const [isEmpty, setIsEmpty] = useState(false);\r\n  const [checkedBrands, setCheckedBrands] = useState<any>({});\r\n  const [brandPage, setBrandPage] = useState([]);\r\n  const router = useRouter();\r\n\r\n  const products = useSelector(\r\n    (state: RootState) => state.product.products\r\n  ) as Product[];\r\n\r\n  useEffect(() => {\r\n    setCheckedBrands([]);\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`${baseUrl}/products/${categoryId}`);\r\n        setBrand(response.data);\r\n        setIsEmpty(response.data.length === 0);\r\n        setBrandPage(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n    const queryBrands = router.query.brands;\r\n    if (typeof queryBrands === \"string\") {\r\n      const selectedBrands = queryBrands.split(\",\");\r\n      const newCheckedBrands: { [key: string]: boolean } = {};\r\n      selectedBrands.forEach((brandId: any) => {\r\n        newCheckedBrands[brandId] = true;\r\n      });\r\n      setCheckedBrands(newCheckedBrands);\r\n    }\r\n  }, [categoryId]);\r\n\r\n  const handleBrandClick = (brandId: any) => {\r\n    const newCheckedBrands = { ...checkedBrands };\r\n    newCheckedBrands[brandId] = !checkedBrands[brandId];\r\n    setCheckedBrands(newCheckedBrands);\r\n    const selectedBrands = Object.keys(newCheckedBrands).filter(\r\n      (key) => newCheckedBrands[key]\r\n    );\r\n\r\n    router.push({\r\n      pathname: router.pathname,\r\n      query: { ...router.query, brands: selectedBrands.join(\",\") },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {categoryId\r\n        ? !isEmpty && (\r\n            <div className=\"box-border max-h-[106px] max-w-[270px] lg:mt-12\">\r\n              <h4 className=\"max-h-[18px] max-w-[270px] uppercase tracking-[0] font-[600] text-[.9375rem] mb-[1.25rem] font-ff-headings\">\r\n                brands\r\n              </h4>\r\n              {brand.map((category: any, index) => {\r\n                const isChecked = checkedBrands[category._id];\r\n                return (\r\n                  <div\r\n                    className=\"relative max-h-[59px] max-w-[270px] flex items-center hover:cursor-pointer\"\r\n                    key={category._id}\r\n                  >\r\n                    <div className=\"flex flex-row mb-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id={category._id}\r\n                        checked={isChecked}\r\n                        onChange={() => handleBrandClick(category.brand)}\r\n                        className=\"mr-4  min-h-[14px] min-w-[14px] hover:cursor-pointer accent-blue-900 hover:bg-blue-900\"\r\n                      />\r\n                      <label\r\n                        htmlFor={category._id}\r\n                        className={`select-none text-[.8125rem]  font-medium hover:cursor-pointer capitalize ${\r\n                          isChecked ? \"text-blue-900\" : \"text-gray-500\"\r\n                        }`}\r\n                      >\r\n                        {category.brand}\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )\r\n        : !isEmpty && (\r\n            <div className=\"box-border max-h-[106px] max-w-[270px] lg:mt-12\">\r\n              <h4 className=\"max-h-[18px] max-w-[270px] uppercase tracking-[0] font-[600] text-[.9375rem] mb-[1.25rem] font-ff-headings\">\r\n                brands\r\n              </h4>\r\n              {brandPage.map((brand: any, index: any) => {\r\n                const isChecked = checkedBrands[brand.id];\r\n                return (\r\n                  <div\r\n                    className=\"relative max-h-[59px] max-w-[270px] flex items-center hover:cursor-pointer\"\r\n                    key={index}\r\n                  >\r\n                    <div className=\"flex flex-row mb-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id={brand.id}\r\n                        checked={isChecked}\r\n                        // onChange={() => handleBrandClick(brand.id)}\r\n                        className=\"mr-4  min-h-[14px] min-w-[14px] hover:cursor-pointer accent-blue-900 hover:bg-blue-900\"\r\n                      />\r\n                      <label\r\n                        htmlFor={brand.id}\r\n                        className={`select-none text-[.8125rem]  font-medium hover:cursor-pointer capitalize ${\r\n                          isChecked ? \"text-blue-900\" : \"text-gray-500\"\r\n                        }`}\r\n                      >\r\n                        {brand.name}\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Brands;\r\n"]}