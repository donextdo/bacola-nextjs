{"version":3,"sources":["orderSlice.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAAgF;AAEhF,+BAA0B;AAC1B,kDAA6C;AAU7C,IAAM,YAAY,GAAe;IAC/B,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,MAAM;IACd,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF,IAAM,YAAY,GAAM,oBAAO,gBAAa,CAAC;AAC7C,IAAM,gBAAgB,GAAM,oBAAO,kBAAe,CAAC;AAEtC,QAAA,gBAAgB,GAAG,0BAAgB,CAC9C,wBAAwB,EACxB,UAAO,QAAkB;;;;;gBACvB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;gBACzB,qBAAM,kBAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,EAAA;;gBAAvD,QAAQ,GAAG,SAA4C;gBAC7D,sBAAO,QAAQ,CAAC,IAAI,EAAC;;;KACtB,CACF,CAAC;AAEW,QAAA,sBAAsB,GAAG,0BAAgB,CACpD,8BAA8B,EAC9B,UAAO,EAAU;;;;;gBACf,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;gBACtB,qBAAM,kBAAK,CAAC,GAAG,CAAI,YAAY,SAAI,EAAI,CAAC,EAAA;;gBAA9C,GAAG,GAAG,SAAwC;gBACpD,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;gBACxC,sBAAO,GAAG,CAAC,IAAI,EAAC;;;KACjB,CACF,CAAC;AAEF,IAAM,UAAU,GAAG,qBAAW,CAAC;IAC7B,IAAI,EAAE,OAAO;IACb,YAAY,cAAA;IACZ,QAAQ,EAAE;QACR,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAgC;YAChD,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YAC7C,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;KACF;IACD,aAAa,EAAE,UAAC,OAAO;QACrB,OAAO;aACJ,OAAO,CAAC,wBAAgB,CAAC,OAAO,EAAE,UAAC,KAAK;YACvC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;QAC3B,CAAC,CAAC;aACD,OAAO,CAAC,wBAAgB,CAAC,SAAS,EAAE,UAAC,KAAK,EAAE,MAAM;YACjD,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAClC,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC;QAC7B,CAAC,CAAC;aACD,OAAO,CAAC,wBAAgB,CAAC,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAM;;YAChD,KAAK,CAAC,KAAK,SAAG,MAAM,CAAC,KAAK,CAAC,OAAO,uCAAI,wBAAwB,EAAA,CAAC;YAC/D,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,CAAC,CAAC;aAED,OAAO,CAAC,8BAAsB,CAAC,OAAO,EAAE,UAAC,KAAK;YAC7C,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;QAC3B,CAAC,CAAC;aACD,OAAO,CAAC,8BAAsB,CAAC,SAAS,EAAE,UAAC,KAAK,EAAE,MAAM;YACvD,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;YAC9B,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC;QAC7B,CAAC,CAAC;aACD,OAAO,CAAC,8BAAsB,CAAC,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAM;;YACtD,KAAK,CAAC,KAAK,SAAG,MAAM,CAAC,KAAK,CAAC,OAAO,uCAAI,sBAAsB,EAAA,CAAC;YAC7D,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;CACF,CAAC,CAAC;AAEY,QAAA,QAAQ,GAAK,UAAU,CAAC,OAAO,UAAC;AAC/C,qBAAe,UAAU,CAAC,OAAO,CAAC","file":"orderSlice.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { OrderItem } from \"./orderItem\";\r\nimport axios from \"axios\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport orderList from \"./data.json\";\r\nimport { OrderObj } from \"./ordertest\";\r\n\r\ninterface OrderState {\r\n  orders: OrderItem[];\r\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: OrderState = {\r\n  orders: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\n\r\nconst PRODUCTS_URL = `${baseUrl}/orders/get`;\r\nconst PRODUCTS_URL_SET = `${baseUrl}/orders/place`;\r\n\r\nexport const insertOrderAsync = createAsyncThunk(\r\n  \"order/insertOrderAsync\",\r\n  async (orderObj: OrderObj) => {\r\n    console.log(\"Response object:\", orderObj);\r\n    const response = await axios.post(PRODUCTS_URL_SET, orderObj);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const getOrdersByUserIdAsync = createAsyncThunk(\r\n  \"order/getOrdersByUserIdAsync\",\r\n  async (id: string) => {\r\n    console.log(\"Response data:\", id);\r\n    const res = await axios.get(`${PRODUCTS_URL}/${id}`);\r\n    console.log(\"Response data:\", res.data);\r\n    return res.data;\r\n  }\r\n);\r\n\r\nconst orderSlice = createSlice({\r\n  name: \"order\",\r\n  initialState,\r\n  reducers: {\r\n    addOrder: (state, action: PayloadAction<OrderItem>) => {\r\n      console.log(\"Adding order:\", action.payload);\r\n      state.orders.push(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(insertOrderAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(insertOrderAsync.fulfilled, (state, action) => {\r\n        state.orders.push(action.payload);\r\n        state.status = \"succeeded\";\r\n      })\r\n      .addCase(insertOrderAsync.rejected, (state, action) => {\r\n        state.error = action.error.message ?? \"Failed to insert order\";\r\n        state.status = \"failed\";\r\n      })\r\n\r\n      .addCase(getOrdersByUserIdAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(getOrdersByUserIdAsync.fulfilled, (state, action) => {\r\n        state.orders = action.payload;\r\n        state.status = \"succeeded\";\r\n      })\r\n      .addCase(getOrdersByUserIdAsync.rejected, (state, action) => {\r\n        state.error = action.error.message ?? \"Failed to get orders\";\r\n        state.status = \"failed\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { addOrder } = orderSlice.actions;\r\nexport default orderSlice.reducer;\r\n"]}