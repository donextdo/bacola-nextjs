{"version":3,"sources":["orderSlice.tsx"],"names":["toolkit_1","require","axios_1","baseUrl_1","initialState","orders","status","error","PRODUCTS_URL","PRODUCTS_URL_SET","exports","insertOrderAsync","createAsyncThunk","orderObj","__awaiter","console","log","post","_a","sent","data","getOrdersByUserIdAsync","id","get","res","orderSlice","createSlice","name","reducers","addOrder","state","action","payload","push","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"mappings":"y7CAAA,IAAAA,UAAAC,QAAA,oBAEAC,QAAAD,QAAA,SACAE,UAAAF,QAAA,0BAUMG,aAA2B,CAC/BC,OAAQ,GACRC,OAAQ,OACRC,MAAO,MAGHC,aAAkBL,UAAA,QAAO,cACzBM,iBAAsBN,UAAA,QAAO,gBAEtBO,QAAAC,iBAAmBX,UAAAY,iBAC9B,yBACA,SAAOC,GAAkB,OAAAC,eAAA,OAAA,OAAA,EAAA,sEAEN,OADjBC,QAAQC,IAAI,mBAAoBH,GACf,CAAA,EAAMX,QAAA,QAAMe,KAAKR,iBAAkBI,WACpD,MAAA,CAAA,EADiBK,EAAAC,OACDC,aAIPV,QAAAW,uBAAyBrB,UAAAY,iBACpC,+BACA,SAAOU,GAAU,OAAAR,eAAA,OAAA,OAAA,EAAA,4EAEH,OADZC,QAAQC,IAAI,iBAAkBM,GAClB,CAAA,EAAMpB,QAAA,QAAMqB,IAAOf,aAAY,IAAIc,WAE/C,OAFME,EAAMN,EAAAC,OACZJ,QAAQC,IAAI,iBAAkBQ,EAAIJ,MAClC,CAAA,EAAOI,EAAIJ,aAIf,IAAMK,WAAazB,UAAA0B,YAAY,CAC7BC,KAAM,QACNvB,aAAYA,aACZwB,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBhB,QAAQC,IAAI,gBAAiBe,EAAOC,SACpCF,EAAMzB,OAAO4B,KAAKF,EAAOC,WAG7BE,cAAe,SAACC,GACdA,EACGC,QAAQ1B,QAAAC,iBAAiB0B,QAAS,SAACP,GAClCA,EAAMxB,OAAS,YAEhB8B,QAAQ1B,QAAAC,iBAAiB2B,UAAW,SAACR,EAAOC,GAC3CD,EAAMzB,OAAO4B,KAAKF,EAAOC,SACzBF,EAAMxB,OAAS,cAEhB8B,QAAQ1B,QAAAC,iBAAiB4B,SAAU,SAACT,EAAOC,SAC1CD,EAAMvB,MAA4BW,OAAvBA,EAAGa,EAAOxB,MAAMiC,SAAOtB,EAAI,yBACtCY,EAAMxB,OAAS,WAGhB8B,QAAQ1B,QAAAW,uBAAuBgB,QAAS,SAACP,GACxCA,EAAMxB,OAAS,YAEhB8B,QAAQ1B,QAAAW,uBAAuBiB,UAAW,SAACR,EAAOC,GACjDD,EAAMzB,OAAS0B,EAAOC,QACtBF,EAAMxB,OAAS,cAEhB8B,QAAQ1B,QAAAW,uBAAuBkB,SAAU,SAACT,EAAOC,SAChDD,EAAMvB,MAA4BW,OAAvBA,EAAGa,EAAOxB,MAAMiC,SAAOtB,EAAI,uBACtCY,EAAMxB,OAAS,cAKRI,QAAAmB,SAAaJ,WAAWgB,QAAOZ,SAC9CnB,QAAA,QAAee,WAAWiB","file":"orderSlice.min.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { OrderItem } from \"./orderItem\";\r\nimport axios from \"axios\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport orderList from \"./data.json\";\r\nimport { OrderObj } from \"./ordertest\";\r\n\r\ninterface OrderState {\r\n  orders: OrderItem[];\r\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: OrderState = {\r\n  orders: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\n\r\nconst PRODUCTS_URL = `${baseUrl}/orders/get`;\r\nconst PRODUCTS_URL_SET = `${baseUrl}/orders/place`;\r\n\r\nexport const insertOrderAsync = createAsyncThunk(\r\n  \"order/insertOrderAsync\",\r\n  async (orderObj: OrderObj) => {\r\n    console.log(\"Response object:\", orderObj);\r\n    const response = await axios.post(PRODUCTS_URL_SET, orderObj);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const getOrdersByUserIdAsync = createAsyncThunk(\r\n  \"order/getOrdersByUserIdAsync\",\r\n  async (id: string) => {\r\n    console.log(\"Response data:\", id);\r\n    const res = await axios.get(`${PRODUCTS_URL}/${id}`);\r\n    console.log(\"Response data:\", res.data);\r\n    return res.data;\r\n  }\r\n);\r\n\r\nconst orderSlice = createSlice({\r\n  name: \"order\",\r\n  initialState,\r\n  reducers: {\r\n    addOrder: (state, action: PayloadAction<OrderItem>) => {\r\n      console.log(\"Adding order:\", action.payload);\r\n      state.orders.push(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(insertOrderAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(insertOrderAsync.fulfilled, (state, action) => {\r\n        state.orders.push(action.payload);\r\n        state.status = \"succeeded\";\r\n      })\r\n      .addCase(insertOrderAsync.rejected, (state, action) => {\r\n        state.error = action.error.message ?? \"Failed to insert order\";\r\n        state.status = \"failed\";\r\n      })\r\n\r\n      .addCase(getOrdersByUserIdAsync.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(getOrdersByUserIdAsync.fulfilled, (state, action) => {\r\n        state.orders = action.payload;\r\n        state.status = \"succeeded\";\r\n      })\r\n      .addCase(getOrdersByUserIdAsync.rejected, (state, action) => {\r\n        state.error = action.error.message ?? \"Failed to get orders\";\r\n        state.status = \"failed\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { addOrder } = orderSlice.actions;\r\nexport default orderSlice.reducer;\r\n"]}