{"version":3,"sources":["ProductPagination.tsx"],"names":["react_1","require","ProductCard_1","baseUrl_1","axios_1","router_1","react_redux_1","productSlice_1","exports","ProductPagination","_a","brand","minValue","maxValue","inStock","onSale","perpage","page","orderby","passgrid","_b","useState","product","setProduct","_c","isGrid","setIsGrid","_d","matchWithProduct","setmatchWithProduct","dispatch","useDispatch","productsRidux","useSelector","state","products","useEffect","fetchProducts","console","log","useRouter","__awaiter","url","get","response","sent","data","length","error","error_2","fetchData","error_1","getItem","localStorage","matchedProducts","filter","pr","some","p","_id","createElement","className","map","index","ProductCard","key","id"],"mappings":"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","file":"ProductPagination.min.js","sourcesContent":["import React, { useState, useEffect, FC } from \"react\";\r\nimport { ProductCard } from \"@/features/product/ProductCard\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch, RootState } from \"@/redux/store\";\r\nimport { Product } from \"@/features/product/product\";\r\nimport { fetchProducts } from \"@/features/product/productSlice\";\r\n\r\nexport const ProductPagination = ({\r\n  brand,\r\n  minValue,\r\n  maxValue,\r\n  inStock,\r\n  onSale,\r\n  perpage,\r\n  page,\r\n  orderby,\r\n  passgrid,\r\n}: any) => {\r\n  const [product, setProduct] = useState([]);\r\n  const [isGrid, setIsGrid] = useState<String>();\r\n  const [matchWithProduct, setmatchWithProduct] = useState<Product[]>([]);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const productsRidux = useSelector(\r\n    (state: RootState) => state.product.products\r\n  ) as Product[];\r\n  useEffect(() => {\r\n    dispatch(fetchProducts());\r\n    console.log(\"data data\", productsRidux);\r\n  }, [dispatch]);\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    if (!perpage) {\r\n      const fetchData = async () => {\r\n        try {\r\n          let url = `${baseUrl}/products?page=${page}&sort=${orderby}`;\r\n\r\n          if (brand) {\r\n            url += `&brands=${brand}`;\r\n          }\r\n          if (minValue && maxValue) {\r\n            url += `&min_price=${minValue}&max_price=${maxValue}`;\r\n          }\r\n          if (inStock) {\r\n            url += `&stock_status=${inStock}`;\r\n          }\r\n          if (onSale) {\r\n            url += `&on_sale=${onSale}`;\r\n          }\r\n\r\n          const response = await axios.get(url);\r\n          const products = response.data.products;\r\n\r\n          if (products.length === 0) {\r\n            console.log(\"No products found.\");\r\n          }\r\n\r\n          setProduct(products);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    } else if (perpage || orderby) {\r\n      const fetchData = async () => {\r\n        try {\r\n          let url = `${baseUrl}/products?page=${page}&perpage=${perpage}&sort=${orderby}`;\r\n\r\n          if (brand) {\r\n            url += `&brands=${brand}`;\r\n          }\r\n          if (minValue && maxValue) {\r\n            url += `&min_price=${minValue}&max_price=${maxValue}`;\r\n          }\r\n          if (inStock) {\r\n            url += `&stock_status=${inStock}`;\r\n          }\r\n          if (onSale) {\r\n            url += `&on_sale=${onSale}`;\r\n          }\r\n\r\n          const response = await axios.get(url);\r\n          const products = response.data.products;\r\n\r\n          if (products.length === 0) {\r\n            console.log(\"No products found.\");\r\n          }\r\n\r\n          setProduct(products);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, [page, perpage, orderby, brand, minValue, maxValue, inStock, onSale]);\r\n\r\n  useEffect(() => {\r\n    const getItem = localStorage.getItem(\"gridType\");\r\n    if (!getItem) {\r\n      console.log(\"empty : \");\r\n      setIsGrid(\"layoutGrid\");\r\n    } else {\r\n      setIsGrid(getItem);\r\n    }\r\n\r\n    console.log(\"setIsGrid : \", getItem);\r\n  }, [passgrid]);\r\n  useEffect(() => {\r\n    const matchedProducts = productsRidux.filter((pr: Product) =>\r\n      product.some((p: any) => p?._id === pr?._id)\r\n    );\r\n    setmatchWithProduct(matchedProducts);\r\n  }, [product, productsRidux]);\r\n  return (\r\n    <div>\r\n      {matchWithProduct.length != 0 ? (\r\n        <div className=\"mx-auto \">\r\n          {/* <div className=\"grid lg:grid-cols-4 md:grid-cols-3 grid-cols-2 \"> */}\r\n          <div\r\n            className={`mx-auto ${\r\n              isGrid === \"list\"\r\n                ? \"grid lg:grid-cols-1 md:grid-cols-1 grid-cols-1\"\r\n                : isGrid === \"fillGrid\"\r\n                ? \"grid lg:grid-cols-2 md:grid-cols-2 grid-cols-2\"\r\n                : isGrid === \"grid3X3Gap\"\r\n                ? \"grid lg:grid-cols-3 md:grid-cols-2 grid-cols-2\"\r\n                : isGrid === \"layoutGrid\"\r\n                ? \"grid lg:grid-cols-4 md:grid-cols-3 grid-cols-2\"\r\n                : \"\"\r\n            }`}\r\n          >\r\n            {matchWithProduct.map((product: any, index) => {\r\n              return (\r\n                <ProductCard\r\n                  key={product.id}\r\n                  product={product}\r\n                  isGrid={passgrid}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>No results found</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"]}