{"version":3,"sources":["RangeSlider.tsx"],"names":["router_1","require","react_1","baseUrl_1","axios_1","exports","RangeSlider","_a","categoryId","_b","useState","minValue","setMinValue","_c","maxValue","setMaxValue","_d","progressRef","useRef","useEffect","__awaiter","response","sent","products","data","prices","map","product","price","maxPrice","Math","max","apply","roundedPrice","ceil","console","log","router","useRouter","query","minPrice","Number","min_price","max_price","isNaN","current","style","left","right","updatePriceQuery","min","push","pathname","__assign","undefined","scroll","React","createElement","className","ref","onChange","e","persist","preventDefault","newMinValue","parseInt","target","value","toString","type","step","placeholder","newMaxValue","onClick"],"mappings":"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","file":"RangeSlider.min.js","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport { useState, useEffect, useRef, ReactElement } from \"react\";\r\nimport { ChangeEvent } from \"react\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport axios from \"axios\";\r\nexport const RangeSlider = ({ categoryId }: any) => {\r\n  const [minValue, setMinValue] = useState(0);\r\n  const [maxValue, setMaxValue] = useState(50);\r\n  const [maxPriceValue, setMaxPriceValue] = useState(0);\r\n  const progressRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (categoryId) {\r\n      const fetchData = async () => {\r\n        const response = await axios(\r\n          `${baseUrl}/productDetails?categoryId=${categoryId}`\r\n        );\r\n        const products = response.data.products;\r\n\r\n        // Extracting all the product prices\r\n        const prices = products.map((product) => product.price);\r\n\r\n        // Finding the maximum price\r\n        const maxPrice = Math.max(...prices);\r\n\r\n        // Rounding the maximum price\r\n        let roundedPrice;\r\n\r\n        roundedPrice = Math.ceil(maxPrice / 10) * 10;\r\n        // setMaxPriceValue(roundedPrice);\r\n        // setMaxValue(maxPriceValue);\r\n        console.log(\"Rounded maximum price: \", roundedPrice);\r\n      };\r\n\r\n      fetchData();\r\n    }\r\n  }, []);\r\n\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    const { query } = router;\r\n    const minPrice = Number(query.min_price);\r\n    const maxPrice = Number(query.max_price);\r\n\r\n    if (!isNaN(minPrice) && !isNaN(maxPrice)) {\r\n      setMinValue(minPrice);\r\n      setMaxValue(maxPrice);\r\n    }\r\n  }, [router.query]);\r\n  const handleMin = (e: ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n    e.preventDefault();\r\n    const newMinValue = parseInt(e.target.value);\r\n    if (maxValue - newMinValue >= 0 && maxValue <= 50) {\r\n      if (newMinValue > parseInt(maxValue.toString())) {\r\n        // Ignore invalid input\r\n      } else {\r\n        setMinValue(newMinValue);\r\n        updatePriceQuery(newMinValue, maxValue);\r\n      }\r\n    } else {\r\n      if (newMinValue < minValue) {\r\n        setMinValue(newMinValue);\r\n        updatePriceQuery(newMinValue, maxValue);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n    e.preventDefault();\r\n    const newMaxValue = parseInt(e.target.value);\r\n    if (newMaxValue - minValue >= 0 && newMaxValue <= 50) {\r\n      if (newMaxValue < parseInt(minValue.toString())) {\r\n        // Ignore invalid input\r\n      } else {\r\n        setMaxValue(newMaxValue);\r\n        updatePriceQuery(minValue, newMaxValue);\r\n      }\r\n    } else {\r\n      if (newMaxValue > maxValue) {\r\n        setMaxValue(newMaxValue);\r\n        updatePriceQuery(minValue, newMaxValue);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (progressRef.current) {\r\n      progressRef.current.style.left = `${(minValue / 50) * 100}%`;\r\n      progressRef.current.style.right = `${(1 - maxValue / 50) * 100}%`;\r\n    }\r\n  }, [minValue, maxValue]);\r\n\r\n  const updatePriceQuery = (min: number, max: number) => {\r\n    router.push(\r\n      {\r\n        pathname: router.pathname,\r\n        query: {\r\n          ...router.query,\r\n          min_price: min,\r\n          max_price: max,\r\n        },\r\n      },\r\n      undefined,\r\n      { scroll: false }\r\n    );\r\n  };\r\n\r\n  const setPriceQuery = () => {\r\n    router.push({\r\n      pathname: router.pathname,\r\n      query: {\r\n        ...router.query,\r\n        min_price: minValue,\r\n        max_price: maxValue,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"box-border max-h-[85px] max-w-[270px] lg:mt-12  \">\r\n      <h4 className=\"max-h-[18px] max-w-[270px] uppercase tracking-[0] font-[600] text-[.9375rem] mb-[1.25rem] font-ff-headings\">\r\n        filter by price\r\n      </h4>\r\n\r\n      <div className=\"mb-4 max-h-[47px] max-w-[270px]\">\r\n        <div className=\"slider relative h-1 rounded-md bg-gray-300\">\r\n          <div\r\n            className=\"progress absolute h-1 bg-black rounded\"\r\n            ref={progressRef}\r\n          ></div>\r\n        </div>\r\n        <div className=\"range-input relative\">\r\n          <input\r\n            onChange={handleMin}\r\n            type=\"range\"\r\n            value={minValue}\r\n            min={0}\r\n            step={10}\r\n            max={50}\r\n            className=\"range-min absolute\r\n             w-full -top-1 h-1 bg-transparent appearance-none pointer-events-none \"\r\n            placeholder=\"Select a minimum value\"\r\n          />\r\n\r\n          <input\r\n            onChange={handleMax}\r\n            type=\"range\"\r\n            value={maxValue}\r\n            min={0}\r\n            step={10}\r\n            max={50}\r\n            className=\"range-max absolute\r\n             w-full -top-1 h-1 bg-transparent appearance-none pointer-events-none\"\r\n            placeholder=\"Select a maximum value\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"max-h-[47px] max-w[270px]\">\r\n        <div className=\"max-h-[18px] max-w[270px] grid gap-0 grid-cols-2 \">\r\n          <div className=\"text-[.75rem]  mt-1 capitalize text-gray-400\">\r\n            price:\r\n            <span className=\"text-black font-semibold\">\r\n              {\" \"}\r\n              ${minValue}\r\n            </span> -{\" \"}\r\n            <span className=\"text-black font-semibold\"> ${maxValue}</span>\r\n          </div>\r\n          <div className=\" ml-16 \">\r\n            <button\r\n              type=\"button\"\r\n              className=\"uppercase text-[.75rem] ml-3 font-semibold\"\r\n              onClick={setPriceQuery}\r\n            >\r\n              filter\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]}