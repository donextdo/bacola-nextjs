{"version":3,"sources":["RecentlyViewProduct.tsx"],"names":["axios_1","require","react_1","react_redux_1","baseUrl_1","ProductCard_1","productSlice_1","exports","RecentlyViewProduct","_a","passgrid","_b","useState","product","setProduct","_c","matchWithProduct","setmatchWithProduct","dispatch","useDispatch","productsRidux","useSelector","state","products","useEffect","fetchProducts","console","log","__awaiter","recentlyAddedProductsString","localStorage","getItem","recentlyAddedProducts","JSON","parse","productPromises","map","productId","get","sent","data","error_2","Promise","all","fetchedProducts","filter","error_1","matchedProducts","pr","some","p","_id","React","createElement","className","index","ProductCard","key","id","isGrid"],"mappings":"y7CACA,IAAAA,QAAAC,QAAA,SACAC,QAAAD,QAAA,SACAE,cAAAF,QAAA,eACAG,UAAAH,QAAA,0BACAI,cAAAJ,QAAA,kCAEAK,eAAAL,QAAA,mCAEaM,QAAAC,oBAAsB,SAACC,OAAEC,EAAAD,EAAAC,SAC9BC,EAAAT,QAAAU,SAAA,IAACC,EAAAF,EAAA,GAASG,EAAAH,EAAA,GACVI,EAAAb,QAAAU,SAAA,IAACI,EAAAD,EAAA,GAAkBE,EAAAF,EAAA,GACnBG,EAAWf,cAAAgB,cACXC,EAAgBjB,cAAAkB,YACpB,SAACC,GAAqB,OAAAA,EAAMT,QAAQU,WA+CtC,OA7CArB,QAAAsB,UAAU,WACRN,EAASZ,eAAAmB,iBACTC,QAAQC,IAAI,YAAaP,IACxB,CAACF,IAEJhB,QAAAsB,UAAU,WAC4BI,eAAA,OAAA,OAAA,EAAA,oFAC9BC,EAA8BC,aAAaC,QAC7C,yBAEEC,EAA+B,GAE/BH,IACFG,EAAwBC,KAAKC,MAAML,IAE/BM,EAAkBH,EAAsBI,IAC5C,SAAOC,GAAc,OAAAT,eAAA,OAAA,OAAA,EAAA,4EAEA,6BAAA,CAAA,EAAM5B,QAAA,QAAMsC,IACxBlC,UAAA,QAAO,oBAAoBiC,WAEhC,MAAA,CAAA,EAHiB5B,EAAA8B,OAGDC,aAGhB,kBADAd,QAAQC,IAAI,kCAAkCU,EAAS,IAAKI,GAC5D,CAAA,EAAO,+CAMa,6BAAA,CAAA,EAAMC,QAAQC,IAAIR,kBAApCS,EAAkBnC,EAAA8B,OACxBzB,EAAW8B,EAAgBC,OAAO,SAAChC,GAAY,OAAY,OAAZA,oCAE/Ca,QAAQC,IAAI,2CAA4CmB,gCAK3D,IACH5C,QAAAsB,UAAU,WACR,IAAMuB,EAAkB3B,EAAcyB,OAAO,SAACG,GAC5C,OAAAnC,EAAQoC,KAAK,SAACC,GAAM,IAAAzC,EAAAE,EAAK,OAAC,QAADF,EAAAyC,SAAC,IAAAzC,OAAA,EAAAA,EAAE0C,QAAU,QAAPxC,EAAKqC,SAAE,IAAArC,OAAA,EAAAA,EAAEwC,SAE1ClC,EAAoB8B,IACnB,CAAClC,EAASO,IAEXgC,MAAAC,cAAA,MAAA,KACED,MAAAC,cAAA,MAAA,CAAKC,UAAU,8CAA4C,4BAG3DF,MAAAC,cAAA,MAAA,CAAKC,UAAU,gBACbF,MAAAC,cAAA,MAAA,CAAKC,UAAU,kEACZtC,EAAiBoB,IAAI,SAACvB,EAAc0C,GACnC,OACEH,MAAAC,cAAChD,cAAAmD,YAAW,CACVC,IAAK5C,EAAQ6C,GACb7C,QAASA,EACT8C,OAAQjD","file":"RecentlyViewProduct.min.js","sourcesContent":["import { AppDispatch, RootState } from \"@/redux/store\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport { ProductCard } from \"@/features/product/ProductCard\";\r\nimport { Product } from \"@/features/product/product\";\r\nimport { fetchProducts } from \"@/features/product/productSlice\";\r\n\r\nexport const RecentlyViewProduct = ({ passgrid }: any) => {\r\n  const [product, setProduct] = useState<any[]>([]);\r\n  const [matchWithProduct, setmatchWithProduct] = useState<Product[]>([]);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const productsRidux = useSelector(\r\n    (state: RootState) => state.product.products\r\n  ) as Product[];\r\n  useEffect(() => {\r\n    dispatch(fetchProducts());\r\n    console.log(\"data data\", productsRidux);\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    const fetchRecentlyViewedProducts = async () => {\r\n      let recentlyAddedProductsString = localStorage.getItem(\r\n        \"recentlyAddedProducts\"\r\n      );\r\n      let recentlyAddedProducts: any[] = [];\r\n\r\n      if (recentlyAddedProductsString) {\r\n        recentlyAddedProducts = JSON.parse(recentlyAddedProductsString);\r\n      }\r\n      const productPromises = recentlyAddedProducts.map(\r\n        async (productId: any) => {\r\n          try {\r\n            const response = await axios.get(\r\n              `${baseUrl}/products/getOne/${productId}`\r\n            );\r\n            return response.data; // Assuming the API response contains the product data\r\n          } catch (error) {\r\n            console.log(`Error fetching product with ID ${productId}:`, error);\r\n            return null;\r\n          }\r\n        }\r\n      );\r\n\r\n      try {\r\n        const fetchedProducts = await Promise.all(productPromises);\r\n        setProduct(fetchedProducts.filter((product) => product !== null));\r\n      } catch (error) {\r\n        console.log(\"Error fetching recently viewed products:\", error);\r\n      }\r\n    };\r\n\r\n    fetchRecentlyViewedProducts();\r\n  }, []);\r\n  useEffect(() => {\r\n    const matchedProducts = productsRidux.filter((pr: Product) =>\r\n      product.some((p: any) => p?._id === pr?._id)\r\n    );\r\n    setmatchWithProduct(matchedProducts);\r\n  }, [product, productsRidux]);\r\n  return (\r\n    <div>\r\n      <div className=\"text-[20px] font-semibold font-ff-headings\">\r\n        RECENTLY VIEWED PRODUCTS\r\n      </div>\r\n      <div className=\"mx-auto mt-5\">\r\n        <div className=\"grid 2xl:grid-cols-4 lg:grid-cols-4 md:grid-cols-3 grid-cols-2\">\r\n          {matchWithProduct.map((product: any, index) => {\r\n            return (\r\n              <ProductCard\r\n                key={product.id}\r\n                product={product}\r\n                isGrid={passgrid}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"]}