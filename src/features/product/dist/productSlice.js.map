{"version":3,"sources":["productSlice.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAAgF;AAGhF,kDAA6C;AAC7C,+BAA0B;AAQ1B,IAAM,YAAY,GAAkB;IAClC,QAAQ,EAAE,EAAE;IACZ,MAAM,EAAE,MAAM;IACd,KAAK,EAAE,IAAI;CACZ,CAAC;AACF,IAAM,YAAY,GAAM,oBAAO,eAAY,CAAC;AAE/B,QAAA,aAAa,GAAG,0BAAgB,CAC3C,uBAAuB,EACvB;;;;oBACmB,qBAAM,kBAAK,CAAC,GAAG,CAAC,YAAY,CAAC,EAAA;;gBAAxC,QAAQ,GAAG,SAA6B;gBAC9C,sBAAO,QAAQ,CAAC,IAAI,EAAC;;;KACtB,CACF,CAAC;AAEW,QAAA,YAAY,GAAG,qBAAW,CAAC;IACtC,IAAI,EAAE,SAAS;IACf,YAAY,cAAA;IACZ,QAAQ,EAAE;QACR,WAAW,EAAE,UAAC,KAAK,EAAE,MAAgC;YACnD,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAClC,CAAC;QACD,qBAAqB,EAAE,UACrB,KAAK,EACL,MAA8D;YAE9D,IAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CACjC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,SAAS,EAAjC,CAAiC,CACzC,CAAC;YACF,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC5C;QACH,CAAC;KACF;IACD,aAAa,EAAE,UAAC,OAAO;QACrB,OAAO;aACJ,OAAO,CAAC,qBAAa,CAAC,OAAO,EAAE,UAAC,KAAK;YACpC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;QAC3B,CAAC,CAAC;aACD,OAAO,CAAC,qBAAa,CAAC,SAAS,EAAE,UAAC,KAAK,EAAE,MAAM;YAC9C,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC;YAC3B,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAClC,CAAC,CAAC;aACD,OAAO,CAAC,qBAAa,CAAC,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAM;;YAC7C,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC;YACxB,KAAK,CAAC,KAAK,SAAG,MAAM,CAAC,KAAK,CAAC,OAAO,uCAAI,eAAe,EAAA,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC;CACF,CAAC,CAAC;AAEY,QAAA,WAAW,IAAb,KAAyC,oBAAY,CAAC,OAAO,mBAA9C,QAAA,qBAAqB,4BAA0B;AAE3E,qBAAe,oBAAY,CAAC,OAAO,CAAC","file":"productSlice.js","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { Product } from \"./product\";\r\nimport productList from \"../product/data.json\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport axios from \"axios\";\r\n\r\ninterface ProductsState {\r\n  products: Product[];\r\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: ProductsState = {\r\n  products: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\nconst PRODUCTS_URL = `${baseUrl}/products/`;\r\n\r\nexport const fetchProducts = createAsyncThunk(\r\n  \"product/fetchProducts\",\r\n  async () => {\r\n    const response = await axios.get(PRODUCTS_URL);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const productSlice = createSlice({\r\n  name: \"product\",\r\n  initialState,\r\n  reducers: {\r\n    setProducts: (state, action: PayloadAction<Product[]>) => {\r\n      state.products = action.payload;\r\n    },\r\n    updateProductQuantity: (\r\n      state,\r\n      action: PayloadAction<{ productId: number; quantity: number }>\r\n    ) => {\r\n      const product = state.products.find(\r\n        (p) => p.id === action.payload.productId\r\n      );\r\n      if (product) {\r\n        product.quantity = action.payload.quantity;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchProducts.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchProducts.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.products = action.payload;\r\n      })\r\n      .addCase(fetchProducts.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message ?? \"Unknown error\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setProducts, updateProductQuantity } = productSlice.actions;\r\n\r\nexport default productSlice.reducer;\r\n"]}