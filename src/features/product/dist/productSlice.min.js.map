{"version":3,"sources":["productSlice.tsx"],"names":["toolkit_1","require","baseUrl_1","axios_1","initialState","products","status","error","PRODUCTS_URL","exports","fetchProducts","createAsyncThunk","__awaiter","get","_a","sent","data","productSlice","createSlice","name","reducers","setProducts","state","action","payload","updateProductQuantity","product","find","p","id","productId","quantity","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"mappings":"47CAAA,IAAAA,UAAAC,QAAA,oBAGAC,UAAAD,QAAA,0BACAE,QAAAF,QAAA,SAQMG,aAA8B,CAClCC,SAAU,GACVC,OAAQ,OACRC,MAAO,MAEHC,aAAkBN,UAAA,QAAO,aAElBO,QAAAC,cAAgBV,UAAAW,iBAC3B,wBACA,WAAA,OAAAC,eAAA,OAAA,OAAA,EAAA,sEACmB,MAAA,CAAA,EAAMT,QAAA,QAAMU,IAAIL,sBACjC,MAAA,CAAA,EADiBM,EAAAC,OACDC,aAIPP,QAAAQ,aAAejB,UAAAkB,YAAY,CACtCC,KAAM,UACNf,aAAYA,aACZgB,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAMjB,SAAWkB,EAAOC,SAE1BC,sBAAuB,SACrBH,EACAC,GAEA,IAAMG,EAAUJ,EAAMjB,SAASsB,KAC7B,SAACC,GAAM,OAAAA,EAAEC,KAAON,EAAOC,QAAQM,YAE7BJ,IACFA,EAAQK,SAAWR,EAAOC,QAAQO,YAIxCC,cAAe,SAACC,GACdA,EACGC,QAAQzB,QAAAC,cAAcyB,QAAS,SAACb,GAC/BA,EAAMhB,OAAS,YAEhB4B,QAAQzB,QAAAC,cAAc0B,UAAW,SAACd,EAAOC,GACxCD,EAAMhB,OAAS,YACfgB,EAAMjB,SAAWkB,EAAOC,UAEzBU,QAAQzB,QAAAC,cAAc2B,SAAU,SAACf,EAAOC,SACvCD,EAAMhB,OAAS,SACfgB,EAAMf,MAA4BO,OAAvBA,EAAGS,EAAOhB,MAAM+B,SAAOxB,EAAI,qBAK/BL,QAAAY,aAAFP,GAAyCL,QAAAQ,aAAasB,SAAOlB,YAA9CZ,QAAAgB,sBAAqBX,GAAAW,sBAEjDhB,QAAA,QAAeA,QAAAQ,aAAauB","file":"productSlice.min.js","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { Product } from \"./product\";\r\nimport productList from \"../product/data.json\";\r\nimport baseUrl from \"../../../utils/baseUrl\";\r\nimport axios from \"axios\";\r\n\r\ninterface ProductsState {\r\n  products: Product[];\r\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: ProductsState = {\r\n  products: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\nconst PRODUCTS_URL = `${baseUrl}/products/`;\r\n\r\nexport const fetchProducts = createAsyncThunk(\r\n  \"product/fetchProducts\",\r\n  async () => {\r\n    const response = await axios.get(PRODUCTS_URL);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const productSlice = createSlice({\r\n  name: \"product\",\r\n  initialState,\r\n  reducers: {\r\n    setProducts: (state, action: PayloadAction<Product[]>) => {\r\n      state.products = action.payload;\r\n    },\r\n    updateProductQuantity: (\r\n      state,\r\n      action: PayloadAction<{ productId: number; quantity: number }>\r\n    ) => {\r\n      const product = state.products.find(\r\n        (p) => p.id === action.payload.productId\r\n      );\r\n      if (product) {\r\n        product.quantity = action.payload.quantity;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchProducts.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchProducts.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.products = action.payload;\r\n      })\r\n      .addCase(fetchProducts.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message ?? \"Unknown error\";\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setProducts, updateProductQuantity } = productSlice.actions;\r\n\r\nexport default productSlice.reducer;\r\n"]}